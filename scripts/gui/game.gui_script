local h = require("scripts.general.hashes")
local s = require("scripts.general.settings")
local v = require("scripts.general.vars")
local camera = require "orthographic.camera"

local acts = {}
local pop_node = nil
local pop_text_node = nil
local pop_position = vmath.vector3()
local pop_is_visible = true
local current_pop = 0
local start_drag = false
local curent_act = {}

local function toogle_pop()
	if pop_is_visible then
		gui.set_enabled(pop_node, false)
		pop_is_visible = false
	else
		gui.set_enabled(pop_node, true)
		pop_is_visible = true
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	pop_node = gui.get_node("pop")
	pop_text_node = gui.get_node("pop_txt")
	pop_position = gui.get_position(pop_node)
	toogle_pop()
	local act_node = nil
	local act_count = nil
	local pos = vmath.vector3()
	
	local temp_table = {}
	for i = 1, s.act_count do
		act_node = gui.get_node("act_" .. i)
		act_count = gui.get_node("act_" .. i .. "_count")
		pos = gui.get_position(act_node)
		screen_pos = gui.get_screen_position(act_node)
		temp_table = {
			node = act_node,
			count = act_count,
			pos = pos,
			screen_pos = screen_pos,
			id = i
		}
		table.insert(acts, temp_table)
	end

	pprint(acts)
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

local function leave_act_btn()
	gui.animate(acts[current_pop].node, "scale", vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.1)
	toogle_pop()
	current_pop = 0
end

local function enter_act_btn(act)
	current_pop = act.id
	local pos = vmath.vector3(act.screen_pos.x, pop_position.y, pop_position.z)
	gui.set_position(pop_node, pos)
	gui.set_text(pop_text_node, s.acts[act.id].name)
	toogle_pop()
	gui.animate(act.node, "scale", vmath.vector3(1.1, 1.1, 1.1), gui.EASING_LINEAR, 0.1)
end

function on_input(self, action_id, action)
	if v.GAME_PAUSED == false then
		return
	end

	if start_drag then
		local a = camera.screen_to_world(h.CAMERA, vmath.vector3(action.x, action.y, 0))
		gui.set_position(curent_act.node, vmath.vector3(action.x, action.y, 0))
		v.POINTER_POS = vmath.vector3(action.x, action.y, 0)
	end

	for i = 1, s.act_count do
		if gui.pick_node(acts[i].node, action.x, action.y) and current_pop ~= acts[i].id then
			enter_act_btn(acts[i])
		elseif gui.pick_node(acts[i].node, action.x, action.y) == false and current_pop == acts[i].id then
			leave_act_btn()
		end
	end
	
	if action_id == h.CLICK and action.pressed then
		for i = 1, s.act_count do
			if gui.pick_node(acts[i].node, action.x, action.y) then
				print("start_drag")
				toogle_pop()
				start_drag = true
				curent_act = acts[i]
			end
		end
	elseif action.released and start_drag then
		print("stop_drag")
		current_pop = 0
		start_drag = false
		gui.set_position(curent_act.node, curent_act.pos)
	end
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
